// later on we will be able to get rid of this buildscript{} block and simply include
// the plugin via id("com.vaadin")
buildscript {
	repositories {
		gradlePluginPortal()
		// pre-releases from Vaadin:
		maven {
			url "https://repo.vaadin.com/nexus/content/repositories/vaadin-prereleases-201912/"
		}
	}
	dependencies {
		classpath("com.vaadin:vaadin-gradle-plugin:0.4.0")
	}
}

plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
//    id("com.vaadin")  // uncomment when the plugin is published in the Gradle plugin repository
}

apply plugin:"com.vaadin"

defaultTasks("clean", "vaadinBuildFrontend", "build")

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	set('vaadinVersion', "14.1.16")
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	implementation('com.vaadin:vaadin-spring-boot-starter') {
//         Webjars are only needed when running in Vaadin 13 compatibility mode
		["com.vaadin.webjar", "org.webjars.bowergithub.insites",
		 "org.webjars.bowergithub.polymer", "org.webjars.bowergithub.polymerelements",
		 "org.webjars.bowergithub.vaadin", "org.webjars.bowergithub.webcomponents"]
				.forEach { group -> exclude(group: group) }
	}
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
	}
}

test {
	useJUnitPlatform()
}
